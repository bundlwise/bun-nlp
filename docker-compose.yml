version: '3.8'

services:
  # PostgreSQL service
  postgres:
    image: postgres:15
    container_name: email-processor-postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=email_processor
    networks:
      - app-network
    healthcheck:
      test: pg_isready -U postgres -d email_processor
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: email-processor-rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - app-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Mock NLP service (placeholder for the actual NLP service)
  mock-nlp-service:
    image: node:18-alpine
    container_name: email-processor-mock-nlp
    working_dir: /app
    volumes:
      - ./mock-nlp-service:/app
    ports:
      - 4000:4000
    command: >
      sh -c "echo 'module.exports = { port: 4000 }' > config.js &&
             echo 'const express = require(\"express\"); const app = express(); const config = require(\"./config\"); app.use(express.json()); app.post(\"/api/process\", (req, res) => { setTimeout(() => { res.json({ success: true, entityCount: Math.floor(Math.random() * 10), sentimentScore: Math.random(), keywords: [\"important\", \"urgent\", \"meeting\"] }); }, 500); }); app.get(\"/api/status/:jobId\", (req, res) => { res.json({ status: \"completed\", jobId: req.params.jobId }); }); app.listen(config.port, () => console.log(`Mock NLP service running on port ${config.port}`));' > server.js &&
             npm init -y &&
             npm install express &&
             node server.js"
    networks:
      - app-network
    depends_on:
      - postgres
      - rabbitmq

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data: 